AWSTemplateFormatVersion: '2010-09-09'

Description:
  Infrastructure to deploy rds in a subnet private and ec2 in a public subnet

Parameters:
  VpcCIRD:
    Type: String
    Description: CIDR of the VPC
    Default: 172.16.0.0/16
  
  PublicSubnetACIDR:
    Type: String
    Description: CIDR of public subnet A
    Default: 172.16.1.0/24
  
  PrivateSubnetACIDR:
    Type: String
    Description: CIDR of private subnet A
    Default: 172.16.2.0/24
  
  PrivateSubnetBCIDR:
    Type: String
    Description: CIDR of private subnet B
    Default: 172.16.3.0/24

Resources:

  #Configure a VPC
  VPCwebServer:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIRD
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPCwebServer

  #Configure the subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCwebServer
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PrivateSubnetACIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetA
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCwebServer
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetA
  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCwebServer
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PrivateSubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnetB
  
#Configure the internet Gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw-webserver
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCwebServer
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCwebServer
      Tags:
        - Key: Name
          Value: PublicRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

 #Configure securities Groups

  webServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from port 5000 and 22
      VpcId: !Ref VPCwebServer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: webServerSG 
  
  databaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connection from port 3306
      VpcId: !Ref VPCwebServer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt webServerSG.GroupId
      Tags:
        - Key: Name
          Value: databaseSG
  
  #Configure EC2 instance

  webServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fff1b9a61dec8a5f
      AvailabilityZone: us-east-1a
      InstanceType: t2.micro
      IamInstanceProfile: EC2s3
      KeyName: iotTest
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref webServerSG
          SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: webServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo dnf install -y python3.9-pip
          sudo dnf install -y git
          sudo dnf install -y mariadb105-server          
          sudo pip install flask
          sudo pip install flask-mysql
          sudo pip install pymysql
          sudo pip install mysql-connector-python
          sudo pip install boto3
          sudo service mariadb start 
          sudo chkconfig mariadb on
          sudo git clone https://github.com/jhormanvillanueva/ec2-rds-ssm-python.git
          sudo mv ec2-rds-ssm-python /home/ec2-user
  
  #Configure RDS

  dbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  databases:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      AvailabilityZone: us-east-1a
      DBSubnetGroupName: !Ref dbSubnetGroup
      VPCSecurityGroups:
        - !Ref databaseSG
      Engine: mariadb
      MasterUsername: root
      MasterUserPassword: '{{resolve:ssm-secure:/book/password:1}}'
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: databases
          